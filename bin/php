#!/bin/bash
#
# @package php/alpine/fpm
# @author  Yannoff <https://github.com/yannoff>
# @license MIT
#

image=yannoff/php-fpm

called=$(basename $0)
version=${called//php/}

if [ -z "${version}" ]
then
    version=${PHP_VERSION:-8.2}
fi

_is_command() {
    docker run --rm --tty ${image}:${version} which "$1" 2>&1 >/dev/null
    return $?
}

_exec() {
    [ -n "${DEBUG}" ] && echo "$*"
    "$@"
}

if [ "$#" -gt "0" ]
then
    # Counter bash parameters expansion behavior: if the first arg
    # is an existing command, it will resolve to its full-path on
    # the host machine
    basecmd=$(basename ${1})

    # When the script is just passed an option, prefix it with "php"
    # This allow calling the script in the form: bin/php -a
    # On the other hand, existing commands must be invoked as-is
    if [ "${1#-}" != "$1" ] || ! _is_command "${basecmd}"
    then
        set -- php "$@"
    fi
else
    # If invoked without args, assume we want a bash session
    set -- bash
fi

args=()

# Remove container after run
args+=( --rm )

# Run container in interactive mode
args+=( --interactive )

# Allocate a pseudo TTY, only if no piped input
[ -p /dev/stdin ] || args+=( --tty )

# Run as standard, low-priviledged user
args+=( -u $(id -u):$(id -g) )

# Mount user/group accounts as read-only
args+=( -v /etc/group:/etc/group:ro )
args+=( -v /etc/passwd:/etc/passwd:ro )
args+=( -v /etc/shadow:/etc/shadow:ro )

# Mount user's composer home if it exists
[ -d $HOME/.composer ] && args+=( -v $HOME/.composer:/.composer )

# Mount user's ssh directory if it exists
[ -d $HOME/.ssh ] && args+=( -v $HOME/.ssh:$HOME/.ssh )

_exec docker run -v ${PWD}:/app -w /app "${args[@]}" ${image}:${version:-8.2} "$@"
